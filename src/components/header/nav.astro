---
const navItems = [
  {
    title: 'Home',
    path: '/'
  },
  {
    title: 'Projects',
    path: '#projects'
  },
  {
    title: 'Howdy',
    path: '/about'
  },
  {
    title: 'Notes',
    path: '/notes'
  },
  {
    title: 'Contributions',
    path: '/open-source-contributions'
  },
  {
    title: 'Contact',
    path: '/reach'
  },
];
---

<nav class="flex items-center justify-between mx-auto mt-4 w-full max-w-6xl px-4">
  <div class="hidden md:flex items-center text-sm gap-4 mx-auto">
    {navItems.map((item) => {
      const isProjects = item.title === 'Projects';
      const href = isProjects && Astro.url.pathname !== '/' ? `/${item.path}` : item.path;

      return (
        <a
          href={href}
          class={`hover:text-default hover:underline ${
            Astro.url.pathname === item.path ? 'text-default underline' : ''
          }`}
        >
          {item.title}
        </a>
      );
    })}
  </div>

  <div class="md:hidden ml-auto relative">
    <button
      id="mobile-menu-button"
      class="flex items-center justify-center w-8 h-8 text-current hover:text-default focus:outline-none"
      aria-label="Toggle navigation menu"
    >
      <svg
        id="hamburger-icon"
        class="w-6 h-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4 6h16M4 12h16M4 18h16"
        ></path>
      </svg>
      <svg
        id="close-icon"
        class="w-6 h-6 hidden"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M6 18L18 6M6 6l12 12"
        ></path>
      </svg>
    </button>

    <div
      id="mobile-menu"
      class="hidden absolute top-full right-0 mt-2 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg min-w-[160px] z-50"
    >
      <div class="py-2">
        {navItems.map((item) => {
          const isProjects = item.title === 'Projects';
          const href = isProjects && Astro.url.pathname !== '/' ? `/${item.path}` : item.path;

          return (
            <a
              href={href}
              class={`block px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-800 hover:text-default ${
                Astro.url.pathname === item.path ? 'text-default bg-gray-50 dark:bg-gray-800' : ''
              }`}
            >
              {item.title}
            </a>
          );
        })}
      </div>
    </div>
  </div>
</nav>

<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const hamburgerIcon = document.getElementById('hamburger-icon');
  const closeIcon = document.getElementById('close-icon');

  if (mobileMenuButton && mobileMenu && hamburgerIcon && closeIcon) {
    mobileMenuButton.addEventListener('click', () => {
      const isOpen = !mobileMenu.classList.contains('hidden');
      
      if (isOpen) {
        mobileMenu.classList.add('hidden');
        hamburgerIcon.classList.remove('hidden');
        closeIcon.classList.add('hidden');
      } else {
        mobileMenu.classList.remove('hidden');
        hamburgerIcon.classList.add('hidden');
        closeIcon.classList.remove('hidden');
      }
    });

    document.addEventListener('click', (event) => {
      const target = event.target as Node;
      if (!mobileMenuButton.contains(target) && !mobileMenu.contains(target)) {
        mobileMenu.classList.add('hidden');
        hamburgerIcon.classList.remove('hidden');
        closeIcon.classList.add('hidden');
      }
    });

    const mobileMenuLinks = mobileMenu.querySelectorAll('a');
    mobileMenuLinks.forEach(link => {
      link.addEventListener('click', () => {
        mobileMenu.classList.add('hidden');
        hamburgerIcon.classList.remove('hidden');
        closeIcon.classList.add('hidden');
      });
    });
  }
</script>
